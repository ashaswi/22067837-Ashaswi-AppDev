@page "/"
@using CourseworkReference.Entities
@using CourseworkReference.Services
@using CourseworkReference.Services.Tag
@using CourseworkReference.Services.Transaction

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .dashboard-card-darkorchid {
        background-color: darkorchid;
        color: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
        text-align: center;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .transaction-list {
        margin-top: 20px;
    }

</style>

<div class="container mt-4">
    <h3 style="color: darkorchid; text-align: center;">TrackEx</h3>
    <br />
    <h6 style="color:green">Available Balance = @(totalIncome + totalDebt - totalExpense)</h6>
    <br />

    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card-darkorchid">
                <h5>Total Inflows</h5>
                <h2>@totalIncome</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card-darkorchid">
                <h5>Total Outflows</h5>
                <h2>@totalExpense</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card-darkorchid">
                <h5>Total Debt</h5>
                <h2>@totalDebt <br /> Cleared @clearedDebt <br /> <span style="color: yellow;">Pending @remainingDebt</span></h2>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end  mb-3">
        <button class="btn btn-primary m-2" @onclick="() => OpenModal()">Add Transaction</button>
        <button class="btn btn-primary m-2" @onclick="() => OpenModal(true)">Clear debt</button>
        <button class="btn btn-primary m-2" @onclick="OpenAddTagsModal">Add Tag</button>
    </div>

    <div class="d-flex justify-content-end mb-3">
    </div>

    <div class="d-flex justify-content-end mb-3">
    </div>
    <div class="row">


        <div>
            Filter
            <select name="typeFilter" id="typeFilter" @bind="typeFiler" class="m-2">
                <option value="">Select Type</option>
                <option value="Income">Income</option>
                <option value="Expense">Expense</option>
                <option value="Debt">Debt</option>
            </select>
            <select name="typeFilter" id="tagFilter" @bind="tagFilter" class="m-2">
                <option value="">Select Tag</option>
                @foreach (var tag in tags)
                {
                    <option value="@tag.Name">@tag.Name</option>
                }
            </select>
            <div class="m-2">
                Search: <input type="text" name="searchQuery" @bind="searchQuery">
            </div>
            <button class="btn btn-secondary m-2" @onclick="ApplyClear">Clear Filters</button>
            <button class="btn btn-secondary m-2" @onclick="ApplyMods">Apply</button>
        </div>
        <div class="col-md-12" style="width: 100%">
            <div class="dashboard-card">
                <div class="d-flex justify-content-between">
                    <h5>Top Transactions</h5>
                    <span>
                        Total Transactions: @transactions.Count
                    </span>
                </div>

                <div class="transaction-list">
                    <div class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Description</th>
                                <th>
                                    Date
                                    @if (sortDesc)
                                    {
                                        <button class="btn-info" @onclick="SortAsc">Sort &darr;</button>
                                    }
                                    else
                                    {
                                        <button class="btn-info" @onclick="SortDesc">Sort &uarr;</button>
                                    }
                                </th>
                                <th>Amount</th>
                                <th>Note</th>
                                <th>Type</th>
                                <th>Tag</th>
                            </tr>
                        </thead>
                        @foreach (var transaction in transactions)
                        {
                            <tbody>

                                <tr class="transaction-item">
                                    <td>@transaction.Description</td>
                                    <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                                    <td>@transaction.Amount.ToString()</td>
                                    @if (transaction.Note != null)
                                    {
                                        <td>@transaction.Note</td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }
                                    <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">
                                        @transaction.Type
                                    </td>

                                    @if (transaction.TagName != null)
                                    {
                                        <td class="tag">@transaction.TagName</td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }
                                </tr>
                            </tbody>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@*Top 5 transactions*@
<div class="col-md-12" style="width: 100%">
    <div class="dashboard-card">
        <div class="d-flex justify-content-between">
            <h5>Top 5 Transactions</h5>
        </div>

        <div class="transaction-list">
            <div class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Note</th>
                        <th>Type</th>
                        <th>Tag</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in transactions
                    .OrderByDescending(t => t.Amount) // Sort by amount in descending order
                    .Take(5))                        // Limit to top 5 transactions
                    {
                        <tr class="transaction-item">
                            <td>@transaction.Description</td>
                            <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                            <td>@transaction.Amount.ToString()</td>
                            @if (transaction.Note != null)
                            {
                                <td>@transaction.Note</td>
                            }
                            else
                            {
                                <td></td>
                            }
                            <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">
                                @transaction.Type
                            </td>

                            @if (transaction.TagName != null)
                            {
                                <td class="tag">@transaction.TagName</td>
                            }
                            else
                            {
                                <td></td>
                            }
                        </tr>
                    }
                </tbody>
            </div>
        </div>
    </div>
</div>


@* Modal for Adding Transaction *@
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Description</label>
                        <input type="text" class="form-control" @bind="newTransaction.Description" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.Amount" />
                    </div>
                    <div class="mb-3">
                        <label>Note</label>
                        <input type="text" class="form-control" @bind="newTransaction.Note" />
                    </div>

                    @if (typeIsClearDebt == false)
                    {
                        <div class="mb-3">
                            <label>Type</label>
                            <select class="form-control" @bind="newTransaction.Type">
                                <option value=""></option>
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="Debt">Debt</option>
                            </select>
                        </div>
                    }
                    <div class="mb-3">
                        <label>Tag</label>
                        <select class="form-control" @bind="newTransaction.TagName">
                            <option value=""></option>
                            @foreach (var tag in tags)
                            {
                                <option value="@tag.Name">@tag.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@if (showAddTagsModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Tag</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Name</label>
                        <input type="text" class="form-control" @bind="newTag.Name" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTag">Add</button>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {

    //This method is called when the dashboard page is opened
    protected override void OnInitialized()
    {
        CalculateTotals();
        tags = new ListTagService(new GetJsonFilePathService()).ListTags();
    }


    //Declaring some fields
    private Transaction newTransaction = new Transaction(); //Transaction class object
    private Tag newTag = new Tag(); //Transaction class object

    private bool showModal = false; //a boolean value that determines wheather to show add transaction modal form or not
    private bool showAddTagsModal = false;

    //These fields are meant to hold the total values after CalculateTotals() method is called.
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal remainingDebt;
    private decimal clearedDebt;
    private bool sortDesc = false;
    private string sortField = "Date";

    private List<Tag> tags;

    // filter
    private string? tagFilter;
    private string? typeFiler;
    private string? searchQuery;


    // field to display validation error
    private string errorMessage;
    private bool typeIsClearDebt = false;

    private List<Transaction> transactions = new ListTransactionService(new GetJsonFilePathService()).ListTransactions();

    //this nethod is called when Add Transaction button from the dashboard is clicked
    private void OpenModal(bool isClearDebt = false)
    {
        newTransaction = new Transaction();
        newTransaction.Date = DateTime.Now;
        if (isClearDebt)
        {
            newTransaction.Description = "Clear Debt";
            newTransaction.Type = "Debt";
            newTransaction.Amount = -remainingDebt;
            typeIsClearDebt = isClearDebt;
        }

        errorMessage = string.Empty;
        showModal = true;
    }

    private void OpenAddTagsModal()
    {
        newTag = new Tag();
        showAddTagsModal = true;
    }

    //This method can be called anytime we need to get total amt of each transaction type.
    private void CalculateTotals()
    {
        //LINQ method used with lamda expressions and extension methods
        totalIncome = transactions
            .Where(t => t.Type == "Income")
            .Sum(t => t.Amount);

        //TASK NO 1:*** use these totalExpense and totalDebt values instead of static HTML values
        totalExpense = transactions
            .Where(t => t.Type == "Expense")
            .Sum(t => t.Amount);

        totalDebt = transactions
            .Where(t => t.Type == "Debt")
            .Where(t => t.Amount > 0)
            .Sum(t => t.Amount);

        clearedDebt = transactions
            .Where(t => t.Type == "Debt" && t.Amount < 0)
            .Sum(t => Math.Abs(t.Amount));

        remainingDebt = totalDebt - clearedDebt;
    }


    //this method is called to close the form modal
    private void CloseModal()
    {
        showModal = false;
        typeIsClearDebt = false;
    }

    private void CloseTagModal()
    {
        showAddTagsModal = false;
    }

    //This method gets called from the modal button "Add"
    private void AddTransaction()
    {

        try
        {
            if (newTransaction != null && !string.IsNullOrWhiteSpace(newTransaction.Description))
            {
                // instantiate AddTransactionService class
                var addTransactionService = new AddTransactionService(new GetJsonFilePathService());
                // call AddTransaction method from AddTransactionService class
                newTransaction.Date = newTransaction.Date == default ? DateTime.Now : newTransaction.Date;


                // Validate transaction type and balance
                if (newTransaction.Type == "Expense" && (totalIncome + totalDebt - totalExpense - newTransaction.Amount) < 0)
                {
                    // Show an error message or alert to the user
                    ShowErrorMessage("Insufficient balance! You don't have enough balance to make this expense.");
                    return; // Exit the method without adding the transaction
                }

                addTransactionService.AddTransaction(newTransaction);
                transactions.Add(newTransaction);
                CalculateTotals(); // Update totals everytime after adding a new transaction.
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage(ex.Message);
        }

        CloseModal();
    }

    private void AddTag()
    {
        try
        {
            if (newTag != null && !string.IsNullOrWhiteSpace(newTag.Name))
            {
                // instantiate AddTransactionService class
                var addTagService = new AddTagService(new GetJsonFilePathService());
                // call AddTransaction method from AddTransactionService class


                addTagService.AddTag(newTag);
                tags.Add(newTag);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage(ex.Message);
        }

        CloseTagModal();
    }


    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    private void ApplyMods()
    {
        transactions = new ListTransactionService(new GetJsonFilePathService()).ListTransactions();
        var filterService = new FilterService();
        transactions = filterService.Filter(transactions, typeFiler, tagFilter);
        var searchService = new SearchService();
        transactions = searchService.ApplySearch(transactions, searchQuery);
        if (sortDesc == true)
        {
            // sort by date
            transactions = transactions.OrderByDescending(t => t.Date).ToList();
        }
        StateHasChanged();
    }

    private void ApplyClear()
    {
        transactions = new ListTransactionService(new GetJsonFilePathService()).ListTransactions();
        typeFiler = null;
        tagFilter = null;
        searchQuery = null;
        StateHasChanged();
    }

    private void SortDesc()
    {
        sortDesc = true;
        ApplyMods();
    }

    private void SortAsc()
    {
        sortDesc = false;
        ApplyMods();
    }


}
